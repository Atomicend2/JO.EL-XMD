import fs from 'fs';
import pkg from '@whiskeysockets/baileys';
const { proto, downloadContentFromMessage } = pkg;

const { default: config } = await import('../../config.cjs');

const joelContext = {
  forwardingScore: 999,
  isForwarded: true,
  forwardedNewsletterMessageInfo: {
    newsletterJid: '120363317462952356@newsletter',
    newsletterName: "‚ú® ·¥ä·¥è·¥á ü x·¥ç·¥Ö  ô·¥è·¥õ ‚ú®",
    serverMessageId: 143
  }
};

// ==========================
//     ü·¥è Ä·¥Ö ·¥ä·¥è·¥á ü ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ·¥è Ä ·¥Ñ ü·¥Äss
// ==========================
class JoelAntiDelete {
  constructor() {
    this.enabled = config.ANTI_DELETE;
    this.messageCache = new Map();
    this.cacheExpiry = 5 * 60 * 1000;
    this.cleanupInterval = setInterval(() => this.cleanExpiredMessages(), this.cacheExpiry);
  }

  cleanExpiredMessages() {
    const now = Date.now();
    for (const [key, msg] of this.messageCache.entries()) {
      if (now - msg.timestamp > this.cacheExpiry) {
        this.messageCache.delete(key);
      }
    }
  }

  formatTime(timestamp) {
    return new Date(timestamp).toLocaleString('en-PK', {
      timeZone: 'Asia/Karachi',
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    }) + ' ‚è≥';
  }
}

const antiDelete = new JoelAntiDelete();
const statusPath = './joel_antidelete.json';

let statusData = {};
if (fs.existsSync(statusPath)) {
  statusData = JSON.parse(fs.readFileSync(statusPath));
}
if (!statusData.chats) statusData.chats = {};

// ==========================
//         ·¥Ñ·¥ú·¥õ·¥á  ú·¥Ä…¥·¥Ö ü·¥á Ä
// ==========================
const AntiDelete = async (m, Matrix) => {
  if (!config.ANTI_DELETE) return;

  const chatId = m.from;
  const prefix = config.PREFIX;

  const formatJid = (jid) => jid ? jid.replace(/@s\.whatsapp\.net|@g\.us/g, '') : 'Unknown';

  const getChatInfo = async (jid) => {
    if (!jid) return { name: 'Unknown Realm', isGroup: false };
    if (jid.includes('@g.us')) {
      try {
        const groupMetadata = await Matrix.groupMetadata(jid);
        return {
          name: groupMetadata?.subject || 'Joel‚Äôs Cute Castle',
          isGroup: true
        };
      } catch {
        return { name: 'Joel‚Äôs Cute Castle', isGroup: true };
      }
    }
    return { name: 'Private Realm', isGroup: false };
  };

  // Command handling
  const command = m.body.toLowerCase();
  if (command === `${prefix}antidelete on` || command === `${prefix}antidelete off`) {
    const responses = {
      on: {
        text: `‚ú® *·¥ä·¥è·¥á ü x·¥ç·¥Ö ·¥Ä…¥·¥õ…™-·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ä·¥Ñ·¥õ…™·¥†·¥Ä·¥õ·¥á·¥Ö!* ‚ú®\n\n` +
              `‚Ä¢ ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ…™·¥è…¥: *·¥á…¥·¥Ä ô ü·¥á·¥Ö*\n` +
              `‚Ä¢ ·¥Ñ·¥Ä·¥Ñ ú·¥á ·¥õ…™·¥ç·¥á: *5 ·¥ç…™…¥·¥ú·¥õ·¥ás*\n` +
              `‚Ä¢ s·¥Ñ·¥è·¥ò·¥á: *·¥Ä ü ü  Ä·¥á·¥Ä ü·¥çs*\n\n` +
              `_ Ä·¥á·¥Ñ·¥è·¥†·¥á Ä…™…¥…¢ ·¥†·¥Ä…¥…™s ú·¥á·¥Ö ·¥ç·¥áss·¥Ä…¢·¥ás..._\n\n` +
              `Íú±·¥õ·¥Ä è ·¥Ñ·¥ú·¥õ·¥á ~ ·¥ä·¥è·¥á ü  ü·¥è·¥†·¥ás  è·¥è·¥ú\n\n(·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ü·¥è Ä·¥Ö ·¥ä·¥è·¥á ü)`,
        contextInfo: joelContext
      },
      off: {
        text: `üí§ *·¥ä·¥è·¥á ü x·¥ç·¥Ö ·¥Ä…¥·¥õ…™-·¥Ö·¥á ü·¥á·¥õ·¥á ·¥Ö…™s·¥Ä ô ü·¥á·¥Ö*\n\n` +
              `_s·¥Ä è …¢·¥è·¥è·¥Ö ô è·¥á ·¥õ·¥è  Ä·¥á·¥Ñ·¥è·¥†·¥á Ä è ·¥ç·¥Ä…¢…™·¥Ñ_\n\n(·¥ò·¥è·¥°·¥á Ä·¥á·¥Ö  ô è  ü·¥è Ä·¥Ö ·¥ä·¥è·¥á ü)`,
        contextInfo: joelContext
      }
    };

    if (command === `${prefix}antidelete on`) {
      statusData.chats[chatId] = true;
      fs.writeFileSync(statusPath, JSON.stringify(statusData, null, 2));
      await Matrix.sendMessage(chatId, responses.on, { quoted: m });
    } else {
      statusData.chats[chatId] = false;
      fs.writeFileSync(statusPath, JSON.stringify(statusData, null, 2));
      antiDelete.messageCache.clear();
      await Matrix.sendMessage(chatId, responses.off, { quoted: m });
    }

    await Matrix.sendReaction(chatId, m.key, 'üí´');
    return;
  }

  // Cache every incoming message
  if (statusData.chats[chatId]) {
    const keyId = m.key.id;
    antiDelete.messageCache.set(keyId, {
      message: m.message,
      sender: m.key.participant || m.key.remoteJid,
      timestamp: Date.now(),
      pushName: m.pushName || 'Unknown',
      chatId
    });
  }

  // Recover deleted messages
  if (m.message?.protocolMessage?.type === 0 && statusData.chats[chatId]) {
    const deletedKey = m.message.protocolMessage.key.id;
    const original = antiDelete.messageCache.get(deletedKey);

    if (original) {
      const chatInfo = await getChatInfo(chatId);
      const caption = `üóëÔ∏è *·¥ç·¥áss·¥Ä…¢·¥á  Ä·¥á·¥Ñ·¥è·¥†·¥á Ä·¥á·¥Ö!*\n\n` +
                      `‚Ä¢ *“ì Ä·¥è·¥ç:* ${original.pushName}\n` +
                      `‚Ä¢ *·¥Ñ ú·¥Ä·¥õ:* ${chatInfo.name}\n` +
                      `‚Ä¢ *·¥õ…™·¥ç·¥á:* ${antiDelete.formatTime(original.timestamp)}\n\n` +
                      `‚úâÔ∏è _·¥è Ä…™…¢…™…¥·¥Ä ü ·¥ç·¥áss·¥Ä…¢·¥á  ô·¥á ü·¥è·¥°:_`;

      await Matrix.sendMessage(chatId, { text: caption, contextInfo: joelContext });
      await Matrix.sendMessage(chatId, { forward: original.message }, { quoted: m });
      antiDelete.messageCache.delete(deletedKey);
    }
  }
};

export default AntiDelete;
